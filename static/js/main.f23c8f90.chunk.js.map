{"version":3,"sources":["logo.svg","models/Item.js","models/itemOperations.js","components/Product.js","components/List.js","container/Shop.js","utils/Ajax.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Item","id","name","price","url","Object","classCallCheck","this","addToCartValue","createClass","key","value","ItemOperations","itemArray","addToCart","currentId","currentProduct","find","itemObject","countItemsInCart","filter","length","fillItems","json","items","products","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","item","push","err","return","Product","props","react_default","a","createElement","src","product","alt","onClick","console","log","addtoCart","List","jsx","map","Product_Product","Shop","_Component","_this","possibleConstructorReturn","getPrototypeOf","call","time","state","count","inherits","setState","objectSpread","itemsArray","callAjax","fn","fillItemState","bind","fetch","then","response","jsonData","catch","m","message","List_List","addToCartClick","Component","App","Shop_Shop","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f23c8f90.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export class Item{\n    constructor(id, name, price, url){\n        this.id = id;\n        this.name = name;\n        this.price = price;\n        this.url = url;\n        this.addToCartValue = false;\n        //this.outOfStock = false;\n        \n    }\n    addToCart(){\n        this.addToCartValue = !this.addToCartValue;\n    }\n}","import {Item} from './Item';\nexport const ItemOperations = {\n    itemArray:[],\n    addToCart(currentId){\n        var currentProduct = this.itemArray.find(itemObject=>itemObject.id==currentId);\n        if(currentProduct){\n            currentProduct.addToCart();\n        }\n    },\n    countItemsInCart(){\n        return this.itemArray.filter(itemObject=>itemObject.addToCartValue).length;\n    },\n\n    fillItems(json){\n        \n            //var object = JSON.parse(json);\n            var items = json.products;\n            for(let item of items){\n                this.itemArray.push(new Item(item.id, item.name, item.price, item.url));\n            }\n            return this.itemArray;\n        }\n}","import React from 'react';\nimport './Product.css';\nexport const Product = (props)=>{\n    return(\n        <div>\n            <img src={props.product.url} alt=\"\"/>\n            <p>Name : {props.product.name}</p>\n            <p>Price : {props.product.price}</p>\n            <button onClick={()=>{\n                console.log(\"Product Clicked \",props.product.id);\n                props.addtoCart(props.product.id);\n                }}>Add to Cart</button>\n           <hr/>   \n        </div>\n    )\n}","import React from 'react';\nimport {Product} from './Product'\nexport const List = (props)=>{\n    console.log(\"Props \",props.items);\n    var jsx = (<h1>No Record Found</h1>);\n   \n    return(\n        <div>\n            {props.items && props.items.length>0?props.items.map(item=><Product addtoCart={(currentId)=>{\n                console.log(\"List Rec \",currentId);\n                props.addtoCart(currentId);\n                }} key={item.id} product={item}/>):jsx}\n        </div>\n    );\n}","import React, { Component } from 'react'\nimport {ajax} from '../utils/Ajax';\nimport {List} from '../components/List';\nimport { ItemOperations } from '../models/itemOperations';\nexport class Shop extends Component{\n    constructor(props){\n        super(props);\n        this.time = 10;\n        this.state = {items:[],count:0};\n        this.itemArray = [];\n    }\n    addToCartClick(currentId){\n        console.log(\"Shop Rec Event Add to Cart \",currentId);\n        ItemOperations.addToCart(currentId);\n        this.setState({...this.state,count:ItemOperations.countItemsInCart()})\n    \n    }\n    message(){\n        if(this.time<12 && this.time>=5){\n            return (<h1>Good Morning User....</h1>)\n        }\n        else\n        if(this.time>=12 && this.time<=4){\n            return (<h1>Good After Noon User....</h1>);\n        }\n        return (<h1>Good Evening User....</h1>);\n    }\n    fillItemState(itemsArray){\n        this.itemArray = itemsArray;\n        console.log(\"Item Array \",itemsArray, \"This is \",this);\n        this.setState({items:this.itemArray},()=>{\n            console.log(\"I am Done...\");\n        });\n        console.log(\"After State Set \",this.state.items);\n    }\n    componentWillMount(){\n        this.callAjax();\n        console.log(\" Component Will Mount...\");\n    }\n    // componentDidMount(){\n       \n    //     console.log(\"After Component Did Mount...\");\n    // }\n    callAjax(){\n        ajax(this.fillItemState.bind(this));\n    }\n    render(){\n        var m = (<h1>Good Evening User</h1>);\n        if(this.time<12 && this.time>=5){\n            m=  (<h1>Good Morning User</h1>)\n        }\n        else\n        if(this.time>=12 && this.time<=4){\n            m= (<h1>Good After Noon User</h1>);\n        }\n        else{\n        m=  (<h1>Good Evening User</h1>);\n        }\n        return (\n                <div>\n                    Calling {this.message()}\n                    <hr/>\n                    {m}\n                    <p>Items in Cart {this.state.count}</p>\n                    <List addtoCart= {this.addToCartClick.bind(this)} items={this.state.items}/>\n                </div>\n               \n        );\n    }\n}","import {ItemOperations} from '../models/itemOperations';\nexport const ajax=(fn)=>{\n    var promise = fetch(\"https://raw.githubusercontent.com/brainmentorspvtltd/myserverdata/master/products1.json\");\n    promise.then(response=>{\n        response.json().then(jsonData=>{\n            // Process\n            let itemsArray = ItemOperations.fillItems(jsonData);\n            fn(itemsArray);\n\n        }).catch(err=>{\n            // Process\n        })\n    })\n}","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Shop } from './container/Shop';\n\nclass App extends Component {\n  render() {\n    return (\n    <div>\n      <h1>Shop App</h1>\n      <Shop/>\n    </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}